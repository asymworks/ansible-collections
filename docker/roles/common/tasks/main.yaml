---
# Main Entry Point for asymworks.docker

# Run Distribution-Specific Tasks
- name: Asymworks Docker | Run Alpine Distribution Tasks
  ansible.builtin.import_tasks: main-alpine.yaml
  when: ansible_facts['os_family']|lower == 'alpine'

- name: Asymworks Docker | Run Debian Distribution Tasks
  ansible.builtin.import_tasks: main-debian.yaml
  when: ansible_facts['os_family']|lower == 'debian' and ansible_facts['distribution']|lower == 'debian'

- name: Asymworks Docker | Run Ubuntu Distribution Tasks
  ansible.builtin.import_tasks: main-ubuntu.yaml
  when: ansible_facts['os_family']|lower == 'debian' and ansible_facts['distribution']|lower == 'ubuntu'

# Add ansible User to Docker Group
- name: Asymworks Docker | Add User to Docker Group
  ansible.builtin.user:
    name: ansible
    groups: docker
    append: true

- name: Asymworks Docker | Check Configuration Directory
  ansible.builtin.file:
    path: /etc/docker
    state: directory
    owner: root
    group: root
    mode: '0755'

# Start Docker Daemon
- name: Asymworks Docker | Start Docker
  ansible.builtin.service:
    name: docker
    enabled: true
    state: started

# Slurp Docker Daemon Configuration
- name: Asymworks Docker | Initialize Configuration
  ansible.builtin.set_fact:
    daemon_json: {}

- name: Asymworks Docker | Check for daemon.json
  ansible.builtin.stat:
    path: /etc/docker/daemon.json
  register: rc

- name: Asymworks Docker | Read Configuration
  when: rc.stat.exists
  block:
    - name: Asymworks Docker | Slurp Daemon Configuration
      ansible.builtin.slurp:
        src: /etc/docker/daemon.json
      register: slurped
    - name: Asymworks Docker | Store Daemon Configuration
      ansible.builtin.set_fact:
        daemon_json: "{{ slurped.content | b64decode | from_json }}"

# Wait for Docker to start
- name: Asymworks Docker | Wait for Docker Daemon
  ansible.builtin.stat:
    path: /var/run/docker.sock
  register: rc
  until: rc.stat.exists
  retries: 10
  delay: 5

# Disable Docker IPv6
- name: Asymworks Docker | Disable IPv6
  when: docker_ipv6 is not defined or not docker_ipv6
  block:
    - name: Asymworks Docker (IPv6) | Remove IPv6 NAT
      community.docker.docker_container:
        name: ipv6nat
        state: absent

    - name: Asymworks Docker (IPv6) | Remove IPv6 Network
      community.docker.docker_network:
        name: "{{ docker_ipv6_network }}"
        state: absent

    - name: Asymworks Docker (IPv6) | Disable Daemon IPv6
      ansible.builtin.set_fact:
        daemon_json: '{{
          daemon_json
          | dict2items
          | rejectattr("key", "match", "^(ipv6|fixed-cidr-v6|userland-proxy)$")
          | items2dict
        }}'

# Enable Docker IPv6
- name: Asymworks Docker | Enable IPv6
  when: docker_ipv6
  block:
    - name: Asymworks Docker (IPv6) | Setup IPv6 Network
      when: docker_ipv6_network != 'default'
      community.docker.docker_network:
        name: "{{ docker_ipv6_network }}"
        enable_ipv6: true
        ipam_config:
          - subnet: "{{ docker_ipv6_subnet }}"

    - name: Asymworks Docker (IPv6) | Install IPv6 NAT
      when: docker_ipv6_network == 'default'
      community.docker.docker_container:
        name: ipv6nat
        image: robbertkl/ipv6nat:0.4.4
        network_mode: host
        cap_drop:
          - ALL
        capabilities:
          - NET_RAW
          - NET_ADMIN
          - SYS_MODULE
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock:ro
          - /lib/modules:/lib/modules:ro
        labels:
          diun.enable: "true"
        pull: "{{ docker_upgrade_images | default(false) | bool }}"
        restart_policy: always
        container_default_behavior: compatibility
        state: started

    - name: Asymworks Docker (IPv6) | Enable Daemon IPv6
      ansible.builtin.set_fact:
        daemon_json: '{{
          daemon_json
          | combine(
            {
              "ipv6": true,
              "userland-proxy": (not docker_ipv6_nat)|bool,
              "fixed-cidr-v6": docker_ipv6_subnet|default("fd00::/80"),
            })
        }}'

# Configure Loki Logging Plugin
- name: Asymworks Docker | Enable Loki Logging
  when: docker_loki_enabled is defined and docker_loki_enabled
  block:
    - name: Asymworks Docker | Install Loki Logging Plugin
      community.docker.docker_plugin:
        plugin_name: grafana/loki-docker-driver:latest
        alias: loki
        state: present

    - name: Asymworks Docker | Enable Loki Logging Plugin
      community.docker.docker_plugin:
        plugin_name: grafana/loki-docker-driver:latest
        alias: loki
        state: enable

    - name: Asymworks Docker | Enable Daemon Loki Logging
      ansible.builtin.set_fact:
        daemon_json: '{{
          daemon_json
          | combine(
            {
              "log-driver": "loki",
              "log-opts": {
                "loki-url": docker_loki_url,
              } | combine(docker_loki_opts|default({}))
            }
          )
        }}'

- name: Asymworks Docker | Disable Loki Logging
  when: docker_loki_enabled is not defined or not docker_loki_enabled
  block:
    - name: Asymworks Docker | Check Loki Logging Plugin
      check_mode: true
      community.docker.docker_plugin:
        plugin_name: grafana/loki-docker-driver:latest
        alias: loki
        state: absent
      register: loki_plugin_rc

    - name: Asymworks Docker | Disable Loki Logging Plugin  # noqa: no-handler
      when: loki_plugin_rc.changed
      community.docker.docker_plugin:
        plugin_name: grafana/loki-docker-driver:latest
        alias: loki
        state: disable

    - name: Asymworks Docker | Uninstall Loki Logging Plugin
      community.docker.docker_plugin:
        plugin_name: grafana/loki-docker-driver:latest
        alias: loki
        state: absent

    # TODO: Make this configurable
    - name: Asymworks Docker | Disable Daemon Loki Logging
      ansible.builtin.set_fact:
        daemon_json: '{{
          daemon_json
          | combine(
            {
              "log-driver": "local",
              "log-opts": {
                "max-file": "3",
                "max-size": "50m",
              },
            }
          )
        }}'

# Write Daemon Configuration
- name: Asymworks Docker | Write Daemon Configuration
  ansible.builtin.copy:
    content: "{{ daemon_json }}"
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: '0644'
  notify: Asymworks Docker | Restart Docker

# Configure Telegraf
- name: Asymworks Docker | Configure Telegraf
  when: telegraf_enabled is defined and telegraf_enabled and docker_telegraf
  block:
    - name: Asymworks Docker | Add Telegraf User to Docker Group
      ansible.builtin.user:
        name: telegraf
        groups: docker
        append: true

    - name: Asymworks Docker | Check Telegraf Directory
      ansible.builtin.file:
        path: "{{ telegraf_conf_d_path }}"
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Asymworks Docker | Active Telegraf Inputs
      ansible.builtin.template:
        src: etc/telegraf.conf.d/20-docker.conf.j2
        dest: "{{ telegraf_conf_d_path }}/20-docker.conf"
        mode: '0644'
      notify: Asymworks Telegraf | Restart Agent

- name: Asymworks Docker | Remove Telegraf
  when: telegraf_enabled is not defined or not telegraf_enabled or not docker_telegraf
  block:
    - name: Docker | Deactivate Telegraf Inputs
      ansible.builtin.file:
        path: "{{ telegraf_conf_d_path }}/20-docker.conf"
        state: absent
